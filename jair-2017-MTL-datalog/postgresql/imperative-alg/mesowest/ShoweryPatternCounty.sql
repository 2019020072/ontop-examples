CREATE TEMPORARY TABLE RAIN AS 
SELECT SID, dFrom, dTo
FROM ( 
SELECT date_time AS dTo, precip_accum_one_hour_set_1 AS currP1,
lag(date_time, 1) OVER (PARTITION BY station_id ORDER BY date_time) AS dFrom,
lag(precip_accum_one_hour_set_1) OVER (PARTITION BY station_id ORDER BY date_time) AS prevP1,
station_id AS SID, air_temp_set_1,
ROW_NUMBER() OVER(PARTITION BY station_id ORDER BY date_time) AS rnm  
FROM tb_newyorkdata2005) as sub 
WHERE ((currP1 > prevP1) OR ((currP1 < prevP1) AND (prevP1 > 0))) AND air_temp_set_1 > 5 AND rnm > 1 AND dTo - dFrom <= interval '1 day';

CREATE TEMPORARY TABLE C_RAIN AS
SELECT * FROM CoalesceInterval('RAIN', 'SID', 'dFrom', 'dTo');
 
CREATE TEMPORARY TABLE DIAMONDRAIN AS 
SELECT SID, dFrom, (dTo + interval '30 minutes') AS dTo 
FROM C_RAIN; 

CREATE TEMPORARY TABLE DRY AS 
SELECT SID, dFrom, dTo
FROM ( 
SELECT date_time AS dTo, precip_accum_one_hour_set_1 AS currP1, 
lag(date_time, 1) OVER (PARTITION BY station_id ORDER BY date_time) AS dFrom,
lag(precip_accum_one_hour_set_1) OVER (PARTITION BY station_id ORDER BY date_time) AS prevP1,
station_id AS SID, air_temp_set_1,
ROW_NUMBER() OVER(PARTITION BY station_id ORDER BY date_time) AS rnm  
FROM tb_newyorkdata2005) as sub 
WHERE ((currP1 = prevP1) OR (currP1 = 0)) AND rnm > 1 AND dTo - dFrom <= interval '1 day';

CREATE TEMPORARY TABLE C_DRY AS
SELECT * FROM CoalesceInterval('DRY', 'SID', 'dFrom', 'dTo');

CREATE INDEX DIAMONDRAIN_IDX_FROM_TO ON DIAMONDRAIN (dFrom,dTo);
CREATE INDEX DRY_IDX_FROM_TO ON C_DRY (dFrom,dTo);

CREATE TEMPORARY TABLE DIAMONDRAINANDDRY AS 
SELECT DIAMONDRAIN.SID AS SID,
CASE 
WHEN DIAMONDRAIN.dFrom > C_DRY.dFrom AND C_DRY.dTo > DIAMONDRAIN.dFrom THEN DIAMONDRAIN.dFrom
WHEN C_DRY.dFrom > DIAMONDRAIN.dFrom AND DIAMONDRAIN.dTo > C_DRY.dFrom THEN C_DRY.dFrom
WHEN DIAMONDRAIN.dFrom = C_DRY.dFrom THEN DIAMONDRAIN.dFrom
END AS dFrom,
CASE 
WHEN DIAMONDRAIN.dTo < C_DRY.dTo AND DIAMONDRAIN.dTo > C_DRY.dFrom THEN DIAMONDRAIN.dTo
WHEN C_DRY.dTo < DIAMONDRAIN.dTo AND C_DRY.dTo > DIAMONDRAIN.dFrom THEN C_DRY.dTo
WHEN DIAMONDRAIN.dTo = C_DRY.dTo THEN DIAMONDRAIN.dTo
END AS dTo
FROM DIAMONDRAIN, C_DRY
WHERE DIAMONDRAIN.SID = C_DRY.SID AND 
((DIAMONDRAIN.dFrom > C_DRY.dFrom AND C_DRY.dTo > DIAMONDRAIN.dFrom) OR (C_DRY.dFrom > DIAMONDRAIN.dFrom AND DIAMONDRAIN.dTo > C_DRY.dFrom) OR (DIAMONDRAIN.dFrom = C_DRY.dFrom)) AND
((DIAMONDRAIN.dTo < C_DRY.dTo AND DIAMONDRAIN.dTo > C_DRY.dFrom) OR (C_DRY.dTo < DIAMONDRAIN.dTo AND C_DRY.dTo > DIAMONDRAIN.dFrom) OR (DIAMONDRAIN.dTo = C_DRY.dTo));

CREATE TEMPORARY TABLE L_DIAMONDRAINANDDRY AS
SELECT county, dFrom, dTo FROM DIAMONDRAINANDDRY, tb_metadata WHERE SID = stid
ORDER BY (county, dFrom);

CREATE TEMPORARY TABLE LOCATIONOFRAD AS
SELECT SID AS county, dFrom, dTo FROM CoalesceInterval('L_DIAMONDRAINANDDRY', 'county', 'dFrom', 'dTo');

CREATE TEMPORARY TABLE L_RAIN AS
SELECT county, dFrom, dTo FROM C_RAIN, tb_metadata WHERE SID = stid
ORDER BY (county, dFrom);

CREATE TEMPORARY TABLE LOCATIONOFRAIN AS
SELECT SID AS county, dFrom, dTo FROM CoalesceInterval('L_RAIN', 'county', 'dFrom', 'dTo');

CREATE INDEX LOCATIONOFRAIN_IDX_FROM_TO ON LOCATIONOFRAIN (dFrom,dTo);
CREATE INDEX LOCATIONOFRAD_IDX_FROM_TO ON LOCATIONOFRAD (dFrom,dTo);

CREATE TEMPORARY TABLE L1_SC AS 
SELECT LOCATIONOFRAIN.county AS county,
CASE 
WHEN LOCATIONOFRAIN.dFrom > LOCATIONOFRAD.dFrom AND LOCATIONOFRAD.dTo > LOCATIONOFRAIN.dFrom THEN LOCATIONOFRAIN.dFrom
WHEN LOCATIONOFRAD.dFrom > LOCATIONOFRAIN.dFrom AND LOCATIONOFRAIN.dTo > LOCATIONOFRAD.dFrom THEN LOCATIONOFRAD.dFrom
WHEN LOCATIONOFRAIN.dFrom = LOCATIONOFRAD.dFrom THEN LOCATIONOFRAIN.dFrom
END AS dFrom,
CASE 
WHEN LOCATIONOFRAIN.dTo < LOCATIONOFRAD.dTo AND LOCATIONOFRAIN.dTo > LOCATIONOFRAD.dFrom THEN LOCATIONOFRAIN.dTo
WHEN LOCATIONOFRAD.dTo < LOCATIONOFRAIN.dTo AND LOCATIONOFRAD.dTo > LOCATIONOFRAIN.dFrom THEN LOCATIONOFRAD.dTo
WHEN LOCATIONOFRAIN.dTo = LOCATIONOFRAD.dTo THEN LOCATIONOFRAIN.dTo
END AS dTo
FROM LOCATIONOFRAIN, LOCATIONOFRAD
WHERE LOCATIONOFRAIN.county = LOCATIONOFRAD.county AND
((LOCATIONOFRAIN.dFrom > LOCATIONOFRAD.dFrom AND LOCATIONOFRAD.dTo > LOCATIONOFRAIN.dFrom) OR (LOCATIONOFRAD.dFrom > LOCATIONOFRAIN.dFrom AND LOCATIONOFRAIN.dTo > LOCATIONOFRAD.dFrom) OR (LOCATIONOFRAIN.dFrom = LOCATIONOFRAD.dFrom)) AND
((LOCATIONOFRAIN.dTo < LOCATIONOFRAD.dTo AND LOCATIONOFRAIN.dTo > LOCATIONOFRAD.dFrom) OR (LOCATIONOFRAD.dTo < LOCATIONOFRAIN.dTo AND LOCATIONOFRAD.dTo > LOCATIONOFRAIN.dFrom) OR (LOCATIONOFRAIN.dTo = LOCATIONOFRAD.dTo));